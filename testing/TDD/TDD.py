import unittest

# ----------------------------
# üü• RED: Test falla porque a√∫n no existe la clase CarritoDeCompras
# ----------------------------
# En este test, asumimos que existe una clase CarritoDeCompras y que comienza vac√≠a

class TestCarritoDeCompras(unittest.TestCase):

    def test_carrito_empieza_vacio(self):
        carrito = CarritoDeCompras()  # ‚ùå Esto fallar√° si la clase a√∫n no est√° definida
        self.assertEqual(len(carrito.productos), 0)


# ----------------------------
# üü© GREEN: Implementamos lo m√≠nimo para que el test pase
# ----------------------------
# Creamos la clase CarritoDeCompras y definimos una lista vac√≠a de productos

class CarritoDeCompras:
    def __init__(self):
        self.productos = []  # Ahora el test test_carrito_empieza_vacio pasa ‚úÖ


# ----------------------------
# üü• RED: Siguiente test, agregar un producto (a√∫n no implementado)
# ----------------------------

    def test_agregar_producto(self):
        carrito = CarritoDeCompras()
        carrito.agregar_producto("Laptop", 1500)  # ‚ùå Este m√©todo no existe todav√≠a
        self.assertEqual(len(carrito.productos), 1)
        self.assertEqual(carrito.productos[0]["nombre"], "Laptop")
        self.assertEqual(carrito.productos[0]["precio"], 1500)

# ----------------------------
# üü© GREEN: Implementamos agregar_producto
# ----------------------------

# A√±adimos un m√©todo que agregue un diccionario {"nombre": ..., "precio": ...} a la lista

class CarritoDeCompras:
    def __init__(self):
        self.productos = []

    def agregar_producto(self, nombre, precio):
        self.productos.append({"nombre": nombre, "precio": precio})


# ----------------------------
# üü• RED: Queremos ahora calcular el total del carrito
# ----------------------------

    def test_total_carrito(self):
        carrito = CarritoDeCompras()
        carrito.agregar_producto("Laptop", 1500)
        carrito.agregar_producto("Mouse", 50)
        self.assertEqual(carrito.total(), 1550)  # ‚ùå total() a√∫n no existe


# ----------------------------
# üü© GREEN: Creamos el m√©todo total
# ----------------------------

# La funci√≥n recorre los productos y suma sus precios

class CarritoDeCompras:
    def __init__(self):
        self.productos = []

    def agregar_producto(self, nombre, precio):
        self.productos.append({"nombre": nombre, "precio": precio})

    def total(self):
        return sum(p["precio"] for p in self.productos)


# ----------------------------
# üü• RED: A√±adir descuento (funcionalidad nueva)
# ----------------------------

    def test_descuento(self):
        carrito = CarritoDeCompras()
        carrito.agregar_producto("TV", 1000)
        carrito.aplicar_descuento(10)  # ‚ùå aplicar_descuento a√∫n no existe
        self.assertEqual(carrito.total(), 900)  # 1000 - 10%


# ----------------------------
# üü© GREEN: Implementamos aplicar_descuento
# ----------------------------

# Guardamos el descuento en un atributo y lo aplicamos al calcular el total

class CarritoDeCompras:
    def __init__(self):
        self.productos = []
        self.descuento = 0  # Nuevo atributo para guardar el descuento

    def agregar_producto(self, nombre, precio):
        self.productos.append({"nombre": nombre, "precio": precio})

    def aplicar_descuento(self, porcentaje):
        self.descuento = porcentaje

    def total(self):
        total_bruto = sum(p["precio"] for p in self.productos)
        return total_bruto * (1 - self.descuento / 100)


# ----------------------------
# ‚ôªÔ∏è REFACTOR: C√≥digo limpio y organizado, no rompemos ning√∫n test
# ----------------------------
# En este punto ya podemos considerar reorganizar o mejorar c√≥digo interno
# sin modificar lo que los tests validan. Por ejemplo: validar tipos, usar clases Producto, etc.

# ----------------------------
# Ejecutar todos los tests
# ----------------------------

if __name__ == '__main__':
    unittest.main()
